snippet acm "ACM"
	package main
	import (
		"bufio"
		"container/heap"
		. "fmt"
		"os"
	)
	type ll = int64
	var (
		in  *bufio.Reader
		out *bufio.Writer
	)
	type info struct {
		l, r, sum int64
		lz        int64
	}
	func (a info) add(b info) info {
		c := a
		c.r = b.r
		if a.sum <= b.sum {
			c.lz = a.lz
		} else {
			c.lz = b.lz
		}
		c.sum = max(a.sum, b.sum)
		return c
	}
	type Seg struct {
		tr []info
	}
	func (it *Seg) Init(n int64) {
		(*it).tr = make([]info, n*4+7)
	}
	func (it *Seg) pushup(p int64) {
		if (*it).tr[p<<1].sum <= it.tr[p<<1|1].sum {
			it.tr[p].lz = it.tr[p<<1].lz
		} else {
			it.tr[p].lz = it.tr[p<<1|1].lz
		}
		(*it).tr[p].sum = max(it.tr[p<<1].sum, it.tr[p<<1|1].sum)
	}
	func (it *Seg) pushdown(p int64) {
		(*it).tr[p<<1].sum += it.tr[p].lz
		(*it).tr[p<<1|1].sum += it.tr[p].lz
		(*it).tr[p<<1].lz += it.tr[p].lz
		(*it).tr[p<<1|1].lz += it.tr[p].lz
		(*it).tr[p].lz = 0
	}
	func (it *Seg) build(p, l, r int64) {
		(*it).tr[p].l = l
		(*it).tr[p].r = r
		(*it).tr[p].sum = 0
		(*it).tr[p].lz = l
		if l == r {
			it.tr[p].sum = 0
			return
		}
		mid := (l + r) >> 1
		(*it).build(p<<1, l, mid)
		(*it).build(p<<1|1, mid+1, r)
		(*it).pushup(p)
	}
	func (it *Seg) Modify(p, l, r, v int64) {
		if it.tr[p].l >= l && it.tr[p].r <= r {
			it.tr[p].sum = v
			return
		}
		mid := (it.tr[p].l + it.tr[p].r) >> 1
		// it.pushdown(p)
		if mid >= l {
			it.Modify(p<<1, l, r, v)
		}
		if mid < r {
			it.Modify(p<<1|1, l, r, v)
		}
		it.pushup(p)
	}
	func (it *Seg) Query(p, l, r int64) info {
		if it.tr[p].l >= l && it.tr[p].r <= r {
			return it.tr[p]
		}
		mid := (it.tr[p].l + it.tr[p].r) >> 1
		// it.pushdown(p)
		res := info{0, 0, 0, 0}
		if mid >= l {
			res = it.Query(p<<1, l, r)
			if mid < r {
				res = res.add(it.Query(p<<1|1, l, r))
			}
		} else {
			res = it.Query(p<<1|1, l, r)
		}

		return res
	}
	type pair struct {
		fi, se int64
	}
	type array [3]int
	func solve() {
		var n, k int
		Fscan(in, &n, &k)
	}
	func main() {
		in = bufio.NewReader(os.Stdin)
		out = bufio.NewWriter(os.Stdout)
		var t int = 1
		Scan(&t)
		g.e = make([]edge, maxn*2)
		g.h = make([]int, N)
		for ; t > 0; t -= 1 {
			solve()
		}
	}
	const (
		N    = ll(2e6 + 7)
		maxn = ll(2e6 + 7)
	)
	var g G
	type G struct {
		e   []edge
		h   []int
		nxt int
	}
	type edge struct {
		next, to, w int
	}
	func (G *G) add(u, v, w int) {
		G.nxt++
		G.e[G.nxt] = edge{G.h[u], v, w}
		G.h[u] = G.nxt
	}
	func (G *G) Init(n int) {
		G.nxt = 1
		for i := 0; i <= n+1; i++ {
			G.h[i] = -1
		}
	}
	type PriorityQueue[T any] struct {
		items []T
		lessF func(a, b T) bool
	}
	func NewPriorityQueue[T any](lessF func(a, b T) bool) *PriorityQueue[T] {
		pq := &PriorityQueue[T]{
			items: []T{},
			lessF: lessF,
		}
		heap.Init(pq)
		return pq
	}
	/*
	use PriorityQueue:
	q:=NewPriro...
	heap.Push(q,{})
	it:=heap.Pop(q)
	*/
	func (pq PriorityQueue[T]) Len() int           { return len(pq.items) }
	func (pq PriorityQueue[T]) Less(i, j int) bool { return pq.lessF(pq.items[i], pq.items[j]) }
	func (pq PriorityQueue[T]) Swap(i, j int)      { pq.items[i], pq.items[j] = pq.items[j], pq.items[i] }
	func (pq *PriorityQueue[T]) Push(x any)        { pq.items = append(pq.items, x.(T)) }
	func (pq *PriorityQueue[T]) Pop() any {
		old := pq.items
		n := len(old)
		if n == 0 {
			return nil
		}
		item := old[n-1]
		pq.items = old[0 : n-1]
		return item
	}
	const (
		MININT64 = -92233720368547758
		MAXINT64 = ll(1e18)
		mod      = 1000000009
		mod2     = 998244353
	)
	func Max(nums ...int64) int64 {
		var maxNum int64 = MININT64
		for _, num := range nums {
			if num > maxNum {
				maxNum = num
			}
		}
		return maxNum
	}
	func Min(nums ...int64) int64 {
		var minNum int64 = MAXINT64
		for _, num := range nums {
			if num < minNum {
				minNum = num
			}
		}
		return minNum
	}
	type dsu struct {
		f   []int
		siz []int
	}
	func (a *dsu) find(x int) int {
		if a.f[x] == x {
			return x
		}
		a.f[x] = a.find(a.f[x])
		return a.f[x]
	}
	func (a *dsu) merge(x, y int) bool {
		x = a.find(x)
		y = a.find(y)
		if x == y {
			return false
		}
		a.siz[x] += a.siz[y]
		a.f[y] = x
		return true
	}
	func pow(a, b, m int64) int64 {
		res := int64(1)
		for ; b > 0; b >>= 1 {
			if (b & 1) == 1 {
				res = (res * a) % m
			}
			a = (a * a) % m
		}
		return res
	}
	func gcd(x, y int64) int64 {
		if x == 0 {
			return y
		}
		tmp := x % y
		if tmp > int64(0) {
			return gcd(y, tmp)
		} else {
			return y
		}
	}


snippet v "shorthand variable declaration"
	${1} := ${2}

snippet vr "variable initialization"
	var ${1:t} ${0:string}

snippet var "variable declaration"
	var ${1} ${2} = ${3}

snippet vars "variables declaration"
	var (
		${1} ${2} = ${3}
	)

snippet ap "append"
	append(${1:slice}, ${0:value})

snippet bl "bool"
	bool

snippet bt "byte"
	byte

snippet br "break"
	break

snippet ch "channel"
	chan ${0:int}

snippet cs "case"
	case ${1:value}:
		${0:${VISUAL}}

snippet co "constants with iota"
	const (
		${1:NAME1} = iota
		${0:NAME2}
	)

snippet cn "continue"
	continue

snippet df "defer"
	defer ${0:func}()

snippet dfr "defer recover"
	defer func() {
		if err := recover(); err != nil {
			${0:${VISUAL}}
		}
	}()

snippet im "import"
	import (
		"${1:package}"
	)

snippet in "interface"
	interface{}

snippet inf "full interface "
	type ${1:name} interface {
		${2:/* methods */}
	}

snippet if "if condition"
	if $1 {
		${2:${VISUAL}}
	}


snippet ife "if else condition"
	if $1 {
		${2:${VISUAL}}
	} else {
		${0}
	}

snippet el "else"
	else {
		${0:${VISUAL}}
	}

snippet ir "if error not nil, return err"
	if err != nil {
		return err
	}
	${0}

snippet f "false"
	false

snippet ft "fallthrough"
	fallthrough

snippet fl "float"
	float32

snippet f3 "float32"
	float32

snippet f6 "float64"
	float64

snippet for "for loop"
	for ${1}{
		${0:${VISUAL}}
	}

snippet fori "for int loop"
	for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {
		${0:${VISUAL}}
	}

snippet forr "for range loop"
	for ${1:e} := range ${2:collection} {
		${0:${VISUAL}}
	}

snippet fun "function"
	func ${1:funcName}(${2}) ${3:error} {
		${4}
	}
	${0}

snippet fum "method"
	func (${1:receiver} ${2:type}) ${3:funcName}(${4}) ${5:error} {
		${6}
	}
	${0}

snippet fumh "http handler function on receiver"
	func (${1:receiver} ${2:type}) ${3:funcName}(${4:w} http.ResponseWriter, ${5:r} *http.Request) {
		${0:${VISUAL}}
	}

snippet lf "log printf"
	log.Printf("%${1:s}", ${2:var})

snippet lp "log println"
	log.Println("${1}")

snippet mk "make"
	make(${1:[]string}, ${0:0})

snippet mp "map"
	map[${1:string}]${0:int}

snippet main "func main()"
	func main() {
		${1}
	}
	${0}

snippet nw "new"
	new(${0:type})

snippet pa "package"
	package ${1:main}

snippet pn "panic"
	panic("${0:msg}")

snippet pf "fmt.Printf()"
	fmt.Printf("%${1:s}\n", ${2:var})

snippet pl "fmt.Println()"
	fmt.Println("${1:s}")

snippet rn "range"
	range ${0}

snippet rt "return"
	return ${0}

snippet rs "result"
	result

snippet sl "select"
	select {
	case ${1:v1} := <-${2:chan1}
		${3}
	default:
		${0}
	}

snippet sr "string"
	string

snippet st "struct"
	type ${1:name} struct {
		${2:/* data */}
	}
	${0}

snippet sw "switch"
	switch ${1:var} {
	case ${2:value1}:
		${3}
	case ${4:value2}:
		${5}
	default:
		${0}
	}

snippet ps "fmt.Sprintf"
	fmt.Sprintf("%${1:s}", ${2:var})

snippet t "true"
	true

snippet g "goroutine named function"
	go ${1:funcName}(${0})

snippet ga "goroutine anonymous function"
	go func(${1} ${2:type}) {
		${3:/* code */}
	}(${0})

snippet test "test function"
	func Test${1:name}(t *testing.T) {
		${0:${VISUAL}}
	}

snippet testt "table test function"
	func Test${1:name}(t *testing.T) {
		tests := []struct {
			name string
		}{
			{
				name: "${2:test name}",
			},
		}

		for _, test := range tests {
			t.Run(test.name, func(t *testing.T) {
				${0:${VISUAL}}
			})
		}
	}

snippet bench "benchmark function"
	func Benchmark${1:name}(b *testing.B) {
		for i := 0; i < b.N; i++ {
			${2}
		}
	}
	${0}

snippet cl "composite literals"
	type ${1:name} struct {
		${2:attrName} ${3:attrType}
	}

snippet om "if key in a map"
	if ${1:value}, ok := ${2:map}[${3:key}]; ok == true {
		${4:/* code */}
	}


snippet gg "Grouped globals with anonymous struct"
	var ${1:var} = struct{
		${2:name} ${3:type}
	}{
		$2: ${4:value},
	}


snippet ja "Marshalable json alias"
	type ${1:parentType}Alias $1

	func (p *$1) MarshalJSON() ([]byte, error) {
		return json.Marshal(&struct{ *$1Alias }{(*$1Alias)(p)})
	}


snippet errwr "Error handling with fmt.Errorf"
	if ${1}err != nil {
		return fmt.Errorf("${2} %w", err)
	}
